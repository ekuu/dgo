// Code generated by "gogen option -n Event -r payload -s name,topic,createdAt,uuid --with-init"; DO NOT EDIT.

package dgo

import (
	"fmt"
	"google.golang.org/protobuf/proto"
	"time"
)

// NewEvent constructor
func NewEvent(payload proto.Message, _opts ...EventOption) *Event {
	_e := new(Event)

	_e.payload = payload

	_e.SetOptions(_opts...)

	_e.init()
	return _e
}

// EventOption option interface
type EventOption interface {
	apply(*Event)
}

// EventOption option function
type eventOptionFunc func(*Event)

func (f eventOptionFunc) apply(_e *Event) {
	f(_e)
}

func (_e *Event) SetOptions(_opts ...EventOption) *Event {
	for _, _opt := range _opts {
		_opt.apply(_e)
	}
	return _e
}

func SkipEventOption() EventOption {
	return eventOptionFunc(func(_e *Event) {
		return
	})
}

func WithEventOptions(o *eventOptions) EventOption {
	return eventOptionFunc(func(_e *Event) {
		_e.SetOptions(o.opts...)
	})
}

// eventOptions options struct
type eventOptions struct {
	opts []EventOption
}

// NewEventOptions new options struct
func NewEventOptions() *eventOptions {
	return new(eventOptions)
}

func (_o *eventOptions) Options() []EventOption {
	return _o.opts
}

func (_o *eventOptions) Append(_opts ...EventOption) *eventOptions {
	_o.opts = append(_o.opts, _opts...)
	return _o
}

// Name name option of Event
func (_o *eventOptions) Name(name string) *eventOptions {
	_o.opts = append(_o.opts, WithEventName(name))
	return _o
}

// Topic topic option of Event
func (_o *eventOptions) Topic(topic string) *eventOptions {
	_o.opts = append(_o.opts, WithEventTopic(topic))
	return _o
}

// CreatedAt createdAt option of Event
func (_o *eventOptions) CreatedAt(createdAt time.Time) *eventOptions {
	_o.opts = append(_o.opts, WithEventCreatedAt(createdAt))
	return _o
}

// Uuid uuid option of Event
func (_o *eventOptions) Uuid(uuid string) *eventOptions {
	_o.opts = append(_o.opts, WithEventUuid(uuid))
	return _o
}

// WithEventName name option of Event
func WithEventName(name string) EventOption {
	return eventOptionFunc(func(_e *Event) {
		_e.name = name
	})
}

// WithEventTopic topic option of Event
func WithEventTopic(topic string) EventOption {
	return eventOptionFunc(func(_e *Event) {
		_e.topic = topic
	})
}

// WithEventCreatedAt createdAt option of Event
func WithEventCreatedAt(createdAt time.Time) EventOption {
	return eventOptionFunc(func(_e *Event) {
		_e.createdAt = createdAt
	})
}

// WithEventUuid uuid option of Event
func WithEventUuid(uuid string) EventOption {
	return eventOptionFunc(func(_e *Event) {
		_e.uuid = uuid
	})
}

func PrintEventOptions(packageName string) {
	opts := []string{
		"WithEventName()",
		"WithEventTopic()",
		"WithEventCreatedAt()",
		"WithEventUuid()",
	}
	if packageName == "" {
		fmt.Printf("opts := []EventOption{ \n")
		for _, v := range opts {
			fmt.Printf("	%s,\n", v)
		}
	} else {
		fmt.Printf("opts := []%s.EventOption{ \n", packageName)
		for _, v := range opts {
			fmt.Printf("	%s.%s,\n", packageName, v)
		}
	}
	fmt.Println("}")
}
