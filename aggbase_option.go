// Code generated by "gogen option -n aggBase -i versionDelta,events --with-init"; DO NOT EDIT.

package dgo

import (
	"fmt"
	"time"
)

// NewAggBase constructor
func NewAggBase(_opts ...AggBaseOption) *aggBase {
	_a := new(aggBase)

	_a.SetOptions(_opts...)

	_a.init()
	return _a
}

// AggBaseOption option interface
type AggBaseOption interface {
	apply(*aggBase)
}

// AggBaseOption option function
type aggBaseOptionFunc func(*aggBase)

func (f aggBaseOptionFunc) apply(_a *aggBase) {
	f(_a)
}

func (_a *aggBase) SetOptions(_opts ...AggBaseOption) *aggBase {
	for _, _opt := range _opts {
		_opt.apply(_a)
	}
	return _a
}

func SkipAggBaseOption() AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		return
	})
}

func WithAggBaseOptions(o *aggBaseOptions) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.SetOptions(o.opts...)
	})
}

// aggBaseOptions options struct
type aggBaseOptions struct {
	opts []AggBaseOption
}

// NewAggBaseOptions new options struct
func NewAggBaseOptions() *aggBaseOptions {
	return new(aggBaseOptions)
}

func (_o *aggBaseOptions) Options() []AggBaseOption {
	return _o.opts
}

func (_o *aggBaseOptions) Append(_opts ...AggBaseOption) *aggBaseOptions {
	_o.opts = append(_o.opts, _opts...)
	return _o
}

// Id id option of aggBase
func (_o *aggBaseOptions) Id(id ID) *aggBaseOptions {
	_o.opts = append(_o.opts, WithAggBaseId(id))
	return _o
}

// CreatedAt createdAt option of aggBase
func (_o *aggBaseOptions) CreatedAt(createdAt time.Time) *aggBaseOptions {
	_o.opts = append(_o.opts, WithAggBaseCreatedAt(createdAt))
	return _o
}

// UpdatedAt updatedAt option of aggBase
func (_o *aggBaseOptions) UpdatedAt(updatedAt time.Time) *aggBaseOptions {
	_o.opts = append(_o.opts, WithAggBaseUpdatedAt(updatedAt))
	return _o
}

// Version version option of aggBase
func (_o *aggBaseOptions) Version(version uint64) *aggBaseOptions {
	_o.opts = append(_o.opts, WithAggBaseVersion(version))
	return _o
}

// Now now option of aggBase
func (_o *aggBaseOptions) Now(now time.Time) *aggBaseOptions {
	_o.opts = append(_o.opts, WithAggBaseNow(now))
	return _o
}

// WithAggBaseId id option of aggBase
func WithAggBaseId(id ID) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.id = id
	})
}

// WithAggBaseCreatedAt createdAt option of aggBase
func WithAggBaseCreatedAt(createdAt time.Time) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.createdAt = createdAt
	})
}

// WithAggBaseUpdatedAt updatedAt option of aggBase
func WithAggBaseUpdatedAt(updatedAt time.Time) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.updatedAt = updatedAt
	})
}

// WithAggBaseVersion version option of aggBase
func WithAggBaseVersion(version uint64) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.version = version
	})
}

// WithAggBaseNow now option of aggBase
func WithAggBaseNow(now time.Time) AggBaseOption {
	return aggBaseOptionFunc(func(_a *aggBase) {
		_a.now = now
	})
}

func PrintAggBaseOptions(packageName string) {
	opts := []string{
		"WithAggBaseId()",
		"WithAggBaseCreatedAt()",
		"WithAggBaseUpdatedAt()",
		"WithAggBaseVersion()",
		"WithAggBaseNow()",
	}
	if packageName == "" {
		fmt.Printf("opts := []AggBaseOption{ \n")
		for _, v := range opts {
			fmt.Printf("	%s,\n", v)
		}
	} else {
		fmt.Printf("opts := []%s.AggBaseOption{ \n", packageName)
		for _, v := range opts {
			fmt.Printf("	%s.%s,\n", packageName, v)
		}
	}
	fmt.Println("}")
}
