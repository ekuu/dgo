// Code generated by "gogen option -n Order -p _ -r AggBase"; DO NOT EDIT.

package order

import (
	"fmt"
	"github.com/ekuu/dgo"
	"github.com/ekuu/dgo/internal/examples/infra/types"
)

// New constructor
func New(aggBase dgo.AggBase, _opts ...Option) *Order {
	_o := new(Order)

	_o.AggBase = aggBase

	_o.SetOptions(_opts...)

	return _o
}

// Option option interface
type Option interface {
	apply(*Order)
}

// Option option function
type optionFunc func(*Order)

func (f optionFunc) apply(_o *Order) {
	f(_o)
}

func (_o *Order) SetOptions(_opts ...Option) *Order {
	for _, _opt := range _opts {
		_opt.apply(_o)
	}
	return _o
}

func SkipOption() Option {
	return optionFunc(func(_o *Order) {
		return
	})
}

func WithOptions(o *options) Option {
	return optionFunc(func(_o *Order) {
		_o.SetOptions(o.opts...)
	})
}

// options options struct
type options struct {
	opts []Option
}

// NewOptions new options struct
func NewOptions() *options {
	return new(options)
}

func (_o *options) Options() []Option {
	return _o.opts
}

func (_o *options) Append(_opts ...Option) *options {
	_o.opts = append(_o.opts, _opts...)
	return _o
}

// Items items option of Order
func (_o *options) Items(items Items) *options {
	_o.opts = append(_o.opts, WithItems(items))
	return _o
}

// TotalPrice totalPrice option of Order
func (_o *options) TotalPrice(totalPrice types.Fen) *options {
	_o.opts = append(_o.opts, WithTotalPrice(totalPrice))
	return _o
}

// Deduction deduction option of Order
func (_o *options) Deduction(deduction types.Fen) *options {
	_o.opts = append(_o.opts, WithDeduction(deduction))
	return _o
}

// WithItems items option of Order
func WithItems(items Items) Option {
	return optionFunc(func(_o *Order) {
		_o.items = items
	})
}

// WithTotalPrice totalPrice option of Order
func WithTotalPrice(totalPrice types.Fen) Option {
	return optionFunc(func(_o *Order) {
		_o.totalPrice = totalPrice
	})
}

// WithDeduction deduction option of Order
func WithDeduction(deduction types.Fen) Option {
	return optionFunc(func(_o *Order) {
		_o.deduction = deduction
	})
}

func PrintOptions(packageName string) {
	opts := []string{
		"WithItems()",
		"WithTotalPrice()",
		"WithDeduction()",
	}
	if packageName == "" {
		fmt.Printf("opts := []Option{ \n")
		for _, v := range opts {
			fmt.Printf("	%s,\n", v)
		}
	} else {
		fmt.Printf("opts := []%s.Option{ \n", packageName)
		for _, v := range opts {
			fmt.Printf("	%s.%s,\n", packageName, v)
		}
	}
	fmt.Println("}")
}
