// Code generated by "gogen option -n Repo -r db,agg,event,snapshot,convert,reverse,newData,parseID --with-init"; DO NOT EDIT.

package mongo

import (
	"context"
	"fmt"

	"github.com/ekuu/dgo"
	repo "github.com/ekuu/dgo/repository"
	mg "go.mongodb.org/mongo-driver/mongo"
)

// NewRepo constructor
func NewRepo[I repo.ID, A dgo.AggBase, D any](db *mg.Database, agg, event, snapshot *mg.Collection, convert func(context.Context, A) (D, error), reverse func(context.Context, dgo.AggBase, D) (A, error), newData func() D, parseID repo.ParseID[I], _opts ...RepoOption[I, A, D]) *Repo[I, A, D] {
	_r := new(Repo[I, A, D])

	_r.db = db
	_r.agg = agg
	_r.event = event
	_r.snapshot = snapshot
	_r.convert = convert
	_r.reverse = reverse
	_r.newData = newData
	_r.parseID = parseID

	_r.SetOptions(_opts...)

	_r.init()
	return _r
}

// RepoOption[I repo.ID,A dgo.AggBase,D any] option interface
type RepoOption[I repo.ID, A dgo.AggBase, D any] interface {
	apply(*Repo[I, A, D])
}

// RepoOption[I repo.ID,A dgo.AggBase,D any] option function
type repoOptionFunc[I repo.ID, A dgo.AggBase, D any] func(*Repo[I, A, D])

func (f repoOptionFunc[I, A, D]) apply(_r *Repo[I, A, D]) {
	f(_r)
}

func (_r *Repo[I, A, D]) SetOptions(_opts ...RepoOption[I, A, D]) *Repo[I, A, D] {
	for _, _opt := range _opts {
		_opt.apply(_r)
	}
	return _r
}

func SkipRepoOption[I repo.ID, A dgo.AggBase, D any]() RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		return
	})
}

func WithRepoOptions[I repo.ID, A dgo.AggBase, D any](o *repoOptions[I, A, D]) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.SetOptions(o.opts...)
	})
}

// repoOptions[I repo.ID,A dgo.AggBase,D any] options struct
type repoOptions[I repo.ID, A dgo.AggBase, D any] struct {
	opts []RepoOption[I, A, D]
}

// NewRepoOptions[I repo.ID,A dgo.AggBase,D any] new options struct
func NewRepoOptions[I repo.ID, A dgo.AggBase, D any]() *repoOptions[I, A, D] {
	return new(repoOptions[I, A, D])
}

func (_o *repoOptions[I, A, D]) Options() []RepoOption[I, A, D] {
	return _o.opts
}

func (_o *repoOptions[I, A, D]) Append(_opts ...RepoOption[I, A, D]) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, _opts...)
	return _o
}

// GetVid getVid option of Repo
func (_o *repoOptions[I, A, D]) GetVid(getVid repo.NewVid[I]) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoGetVid[I, A, D](getVid))
	return _o
}

// NewEvent newEvent option of Repo
func (_o *repoOptions[I, A, D]) NewEvent(newEvent func() repo.Event[I]) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoNewEvent[I, A, D](newEvent))
	return _o
}

// NewSnapshot newSnapshot option of Repo
func (_o *repoOptions[I, A, D]) NewSnapshot(newSnapshot func() repo.Snapshot[I, Aggregate[I, D]]) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoNewSnapshot[I, A, D](newSnapshot))
	return _o
}

// NewAggregate newAggregate option of Repo
func (_o *repoOptions[I, A, D]) NewAggregate(newAggregate func() Aggregate[I, D]) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoNewAggregate[I, A, D](newAggregate))
	return _o
}

// VersionFieldName versionFieldName option of Repo
func (_o *repoOptions[I, A, D]) VersionFieldName(versionFieldName string) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoVersionFieldName[I, A, D](versionFieldName))
	return _o
}

// CloseTransaction closeTransaction option of Repo
func (_o *repoOptions[I, A, D]) CloseTransaction(closeTransaction bool) *repoOptions[I, A, D] {
	_o.opts = append(_o.opts, WithRepoCloseTransaction[I, A, D](closeTransaction))
	return _o
}

// WithRepoGetVid getVid option of Repo
func WithRepoGetVid[I repo.ID, A dgo.AggBase, D any](getVid repo.NewVid[I]) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.getVid = getVid
	})
}

// WithRepoNewEvent newEvent option of Repo
func WithRepoNewEvent[I repo.ID, A dgo.AggBase, D any](newEvent func() repo.Event[I]) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.newEvent = newEvent
	})
}

// WithRepoNewSnapshot newSnapshot option of Repo
func WithRepoNewSnapshot[I repo.ID, A dgo.AggBase, D any](newSnapshot func() repo.Snapshot[I, Aggregate[I, D]]) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.newSnapshot = newSnapshot
	})
}

// WithRepoNewAggregate newAggregate option of Repo
func WithRepoNewAggregate[I repo.ID, A dgo.AggBase, D any](newAggregate func() Aggregate[I, D]) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.newAggregate = newAggregate
	})
}

// WithRepoVersionFieldName versionFieldName option of Repo
func WithRepoVersionFieldName[I repo.ID, A dgo.AggBase, D any](versionFieldName string) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.versionFieldName = versionFieldName
	})
}

// WithRepoCloseTransaction closeTransaction option of Repo
func WithRepoCloseTransaction[I repo.ID, A dgo.AggBase, D any](closeTransaction bool) RepoOption[I, A, D] {
	return repoOptionFunc[I, A, D](func(_r *Repo[I, A, D]) {
		_r.closeTransaction = closeTransaction
	})
}

func PrintRepoOptions(packageName string) {
	opts := []string{
		"WithRepoGetVid()",
		"WithRepoNewEvent()",
		"WithRepoNewSnapshot()",
		"WithRepoNewAggregate()",
		"WithRepoVersionFieldName()",
		"WithRepoCloseTransaction()",
	}
	if packageName == "" {
		fmt.Printf("opts := []RepoOption{ \n")
		for _, v := range opts {
			fmt.Printf("	%s,\n", v)
		}
	} else {
		fmt.Printf("opts := []%s.RepoOption{ \n", packageName)
		for _, v := range opts {
			fmt.Printf("	%s.%s,\n", packageName, v)
		}
	}
	fmt.Println("}")
}
